JWT auth & Reconncting & Errors
FrontEnd:
Refacting UI reconnecting feature
Error handling and notification
Introduced routes and route guard to control access
1. RTQuotesTableComponent:
  - Error notification via snack component and SnacksService
  - Status bar notification about connecting and reconnecting process
  - Added buttons to hide and show Test server panel and connecion panel
  - Refactored connectionState$ behavior subject
  - Styling updated and fixed mobile design
2. QuotesDataService:
  - Sugnificantly refactored  reconnecting functionlity. Repeat callback control manually via two new variables 
  conecctionRetryCount (qty of attempts to reestablish connection) and current attempt number - connectionAttemptN
  - Introduced errors-model.ts as map to store server errors code and instructions to handle them (reconnecting or not and etc) 
  - Fixed closing user intiated closing a connecion. Closing is executed by passing 0 code error.
  - Error model has been expanded with properties to ignore changing error code and ignore displaing error message
3. TestingMngService: Added error notification via snack component and SnacksService (only jwt expired)

Backend
1. auth-module.ts - Added module to verify client via provided jwt token 
2. ws-server.js:
  - Added connecion jwt verification via new auth-module.ts and clients notification if there is any error
  - The whole module has been restructured by spliting functionlity in small functions to make it more relyable and readable
  - Fix: Closing only a client with expired jwt token and notify only this client

06/02/25
FrontEnd:
1. HTTP Errors interceptor for handling authentication errors from auth server
2. QuotesDataService
  - Introduced functionlity to refresh jwt token by hittin auth server api
  - Fixing and refactoring of reconnecting functionlity
  - Fixing disconnecting functionlity 
3. RTQuotesTableComponent:
  - Included disabling action buttons while connecting, disconnecting and retrying is executing
  - Disconnecting process has been added to the progress bar element
  - autoActiveFirstOption property has been removed from autocomplete element so it wasn't choosen by default when user hit enter in the filter
  - Responsive design has been fixed
4. AuthService - a function to get new jwt token when current is expired has been added, using auth server api
5. TestingMngService - error handler is Included
6. errors-model.ts has been expanded with server errors models
Backend - Minor Fixing

10/02/25
Auto-refreshing expired JWT token & Errors model
FrontEnd:
1. Seamless refreshing expired JWT token has been: refactored AuthService and QuotesDataService TestingMngService
2. Fixed race token refreshing condition. Only one api call is being used to refresh token. Other request are filtered via exhaustMap and subject pattern
  refactored AuthService and QuotesDataService TestingMngService
3. errors-model.ts has been extended with server error constant map. Errors codes has been fixed and changed correctly
4. QuotesDataService: Disconnecting feature has been refactored. UI send request to the server to close connection. Server closes connection and send appropriate 
closing code - 4001
5. JWT expired error code has been changed to custom - 4000
6. TestingMngService: Refactored reconnecting feature introducing custom handler for jwt expiration and reconnecting attempts managing
Backend:
1. error-model.ts: Created type, interface and errors map-SERVER_ERRORS in order to strictly determine errors codes produced by the server
2. ws-server.js: 
  - Refactored by implementing retrieving  errors data from the error model map and using literals as keys
  - Implemented feature of closing a client by its request and sending appropriate code(4001)
  - Refactored restarting and closing WS server by using status literals and notifying client with correct codes of closing their connecions
3 wss.js: Refactored instructions to close ws server

20/02/25
FrontEnd:
1. Logout UI and functionlity have been Implemented
  -RTQuotesTableComponent: A button with user Id and attached menu have been added to the component's template. Styles have been updated
  -src/app/services/auth.guard.ts - CanActive function have been refactored: 
    So before opeining the main page the service request api to refresh/veirfy jwt and in response it gets jwt payload which is used for UI purposes
    JWT payload is saved in the indexDB storage
  -AuthService: logout function has been added and refresh function have been refactored since they get jwt payload in the response
Backend:
1. testng-ws-server-node/auth-module.ts: Fixed verifyAccess function (handle case when clint doesn't have jwt cookies at all)



